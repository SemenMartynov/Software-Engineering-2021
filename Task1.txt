Задание 1.

Цель: создать небольшой сервис, который будет запакован в Docker контейнер и будет выложен в публичный git-репозиторий.

По шагам:

1. Выбрать тему (примерные варианты приведу в ниже)

2. Создать репозиторий проекта.
Если у вас больше опыта с GitHub, то рекомендую попробовать Bitbucket.
Если и так каждый день видите синий интерфейс -- то можно попробовать оранжевый.
Я просто рекомендую попробовать что-то менее привычное, менее изученное.
Обязательно не забудьте приложить файл лицензии (рекомендую MIT или Apache).
И в конце стоит сделать README.md файл с описанием проекта, примерами работы (рекомендую на английском).

3. Провести декомпозицию задачи.
Опять же, я рекомендую (но не настаиваю) на формате пользовательских историй,
которые подчёркивают ценность задачи, а не детали её имплементации. Но это уже кому что нравится.
Мне главное видеть набор issues, с которыми будут линковаться commits.
Задачи нужно занести в какую-то публично доступную трекалку.
В GitHub/GitLab есть встроенная трекалка, в Bitbucket вроде тоже, но там ещё Trello есть.
В худшем случае, можно даже Google Spreadsheets использовать.
Я ожидаю, что будет 4-5 задач (фичей).

4. Используя любой из подходов управления веток в git, провести реализацию задачи.
Если хватает опыта с git-flow, можно попробовать тот трам-пара-рам подход, про который рассказывал Влад.
Если нет -- то лучше отработать именно git-flow. При работе с git, нужно продемонстрировать лучшие практики:
- правильно настроенный git (имя и e-mail в gitconfig)
- отсутствие артефактов в репозитории
- комментарий к коммиту, отвечающий на вопрос "для чего это сделано?", а не "как это сделано?"
- линковка с issue, которая решается этим коммитов
- наличие `.gitignore`
и т.д.
Чего я точно не хочу увидеть -- одного большого коммита, в котором слеплено всё на свете, а в комментарии
что-то типа "word is done" или "initial commit"))

5. Упаковать сервис в Docker.
Я хочу сделать `git pull` вашего сервиса, потом сделать `Docker build .` и получить работающий сервис.
В Docker-образе не должно быть лишних артефактов: к примеру, если мы говорим о C++, там не должно быть
объектных файлов или дебажных символов. Это достигается за счёт multistaging сборки, когда в одном
контейнере запускается cmake/компиляция/линковка, а в другой контейнер копируется уже получившийся бин
и всё, что нужно для окружения (либы).
Рекомендую прикрутить к этому сервису кэширование (redis), или БД или ещё что-то (тогда потребуется
ansible файл) для получения опыта работы с этим инструментом.

Что НЕ надо делать:
- Пока не надо беспокоиться о документации
- Не надо обеспечивать покрытие тестами, мы к этому планируем дальше вернуться
- Не надо списывать друг у друга код: в рамках этого курса мы не оцениваем качество имплементации,
только тренируем инженерные практики. Но когда люди начинают друг у друга стягивать реализацию, это
сразу видно (серьёзно! логика всё выдаёт, даже если переписать на другом языке) и проверять такое
становится уже не так интересно.

Когда работа будет завершена (давайте определим 30 ноября в качестве DDL)
нужно будет сделать pull request со ссылкой в этот репозиторий:
https://github.com/SemenMartynov/Software-Engineering-2021

Тему и её детализацию можно выбрать самостоятельно, я просто предложу пару вариантов,
чтоб задать вектор для дальнейших размышлений:
- конвертор из XML в YAML (на вход POST запросом отправляется XML файл, на выходе YAML)
- конвертор из YAML в JSON
- конвертор из JSON в ini
- конвертор из celsius degree в fahrenheit
- конвертор из USD в EUR (нужна интеграции со внешним сервисом, хотя бы с гуглом)
- конвертор из BTC в BTS
- получение среднего значения температуры воздуха в заданный день
- телеграмм бот с новостями, который отслеживает RSS feed какого-то сайта
- телеграмм бот, который получает ссылку на YouTube (+два таймстемпа), и возвращает gif-ку
- файл-сервер, который умеет получать файлы и складывать в локальной файловой системе
- ...

Let's have a fun!)
